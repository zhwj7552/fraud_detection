library(shiny)
install.packages("shiny")
library(shiny)
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
library(shiny)
shinyUI(pageWithSidebar(
# Application title
headerPanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('~/fraud_detection/Shiny')
iris
library(dplyr)
mutate(.iris, SepalwZ <- Sepal.Width - mean(Sepal.Width) )
iris <- iris
mutate(.iris, SepalwZ <- Sepal.Width - mean(Sepal.Width) )
mutate(iris, SepalwZ <- Sepal.Width - mean(Sepal.Width) )
mutate(iris, SepalwZ <- (Sepal.Width - mean(Sepal.Width))/sd(Sepal.Width) )
mutate(iris, (Sepal.Width - mean(Sepal.Width))/sd(Sepal.Width) -> SepalwZ )
mutate(iris, SepalwZ <- ((Sepal.Width - mean(Sepal.Width))/sd(Sepal.Width) )
mutate(iris, SepalwZ <- ((Sepal.Width - mean(Sepal.Width))/sd(Sepal.Width) ))
mutate(iris, SepalwZ <- ((Sepal.Width - mean(Sepal.Width))/sd(Sepal.Width) ))
rm(SepalwZ)
mutate(iris, SepalwZ <- ((Sepal.Width - mean(Sepal.Width))/sd(Sepal.Width) ))
rm(SepalwZ)
mutate(iris, SepalwZ = ((Sepal.Width - mean(Sepal.Width))/sd(Sepal.Width) ))
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
Z_Score_Thres <- 2
filter(iris, SepalwZ > Z_Score_Thresh)
View(iris)
iris <- mutate(iris, SepalwZ = ((Sepal.Width - mean(Sepal.Width))/sd(Sepal.Width) )) %>% filter(iris, SepalwZ > Z_Score_Thresh)
iris <- mutate(iris, SepalwZ = ((Sepal.Width - mean(Sepal.Width))/sd(Sepal.Width) )) %>% filter(iris, SepalwZ > Z_Score_Thres)
iris <- mutate(iris, SepalwZ = ((Sepal.Width - mean(Sepal.Width))/sd(Sepal.Width) )) %>% filter(SepalwZ > Z_Score_Thres)
View(iris)
table(iris)
table(results)
results <- mutate(iris, SepalwZ = ((Sepal.Width - mean(Sepal.Width))/sd(Sepal.Width) )) %>% filter(SepalwZ > Z_Score_Thres)
table(results)
rm(iris)
results <- mutate(iris, SepalwZ = ((Sepal.Width - mean(Sepal.Width))/sd(Sepal.Width) )) %>% filter(SepalwZ > Z_Score_Thres)
table(results)
shiny::runApp('~/fraud_detection/Shiny')
shiny::runApp('~/fraud_detection/Shiny')
hist(iris$Sepal.Width)
shiny::runApp('~/fraud_detection/Shiny')
shiny::runApp('~/fraud_detection/Shiny')
})
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
#hist(rnorm(input$num))
hist(iris$Sepal.Width)
})
}
shinyApp(ui = ui, server = server)
getSymbols(c("T"))
library(quantmod)
getSymbols(c("T"))
ATNT <- T
View(ATNT)
ticker.lm = lm(T.Low ~ lag(T.High) + T.Open + lag(T.Low) + lag(T.Close)   , data = T)
summary(ticker.lm)
subset(ATNT, row.names(ATNT)>"2010-1-1")
predict.lm(ticker.lm)
install.packages("rWeka")
install.packages("RWeka")
library(RWeka)
install.packages("rjava")
install.packages("rJava")
library(RWeka)
library("rJava", lib.loc="~/R/win-library/3.2")
library("RWeka", lib.loc="~/R/win-library/3.2")
library("rJava", lib.loc="~/R/win-library/3.2")
library("RWeka", lib.loc="~/R/win-library/3.2")
read.arff("http://weka.8497.n7.nabble.com/file/n23121/credit_fruad.arff")
read.arff("http://weka.8497.n7.nabble.com/file/n23121/credit_fruad.arff", package = "RWeka")
read.arff(url("http://weka.8497.n7.nabble.com/file/n23121/credit_fruad.arff"), package = "RWeka")
read.arff(url("http://weka.8497.n7.nabble.com/file/n23121/credit_fruad.arff", package = "RWeka")
)
setwd("C:\Users\rvane\Documents\fraud_detection\Data")
getwd()
setwd("C:\Users\rvane\Documents\fraud_detection\Data")
setwd("C:/Users/rvane/Documents/fraud_detection/Data")
read.arff(credit_fruad.arff)
read.arff("credit_fruad.arff")
read.arff(url("http://weka.8497.n7.nabble.com/file/n23121/credit_fruad.arff", package = "RWeka"))
install.packages("acs")
library("acs", lib.loc="~/R/win-library/3.2")
acs.fetch(endyear = 2011, span = 5, Keyword = "Business", key = "95fc57a785243d85907d142f30c46c50c555be95", col.names = "pretty")
acs.fetch(endyear = 2011, span = 5, table.name="Sex", Keyword = "Business", key = "95fc57a785243d85907d142f30c46c50c555be95", col.names = "pretty")
geo.make()
acs.fetch(endyear = 2011, span = 5, geo.make(us=1) table.name="Sex", Keyword = "Business", key = "95fc57a785243d85907d142f30c46c50c555be95", col.names = "pretty")
acs.fetch(endyear = 2011, span = 5, geo.make(us=1), table.name="Sex", Keyword = "Business", key = "95fc57a785243d85907d142f30c46c50c555be95", col.names = "pretty")
geo.make(us=1)
acs.fetch(endyear = 2011, span = 5, geography = geo.make(us=1), table.name="Sex", Keyword = "Business", key = "95fc57a785243d85907d142f30c46c50c555be95", col.names = "pretty")
View(`T`)
getSymbols(c("T", "AMZN",))  #need to improve this line to pull form google
getSymbols(c("T", "AMZN"))  #need to improve this line to pull form google
View(AMZN)
View(`T`)
lapply(AMZN, T)
lapply(AMZN, ATNT)
SymbolsList <- c("T", "AAPL")
getSymbols(SymbolsList)  #need to improve this line to pull form google
Playground$Div <- getDividends(SymbolsList, from = "2007-01-01", to = Sys.Date(), src = "google", auto.assign = FALSE)
Playground$Div <- getSplits(SymbolsList, from = "2007-01-01", to = Sys.Date(), src = "google", auto.assign = FALSE)
View(`T`)
getDividends(SymbolsList, from = "2007-01-01", to = Sys.Date(), src = "google", auto.assign = FALSE)
for (i in 1:2){}
SymbolsList[i] <- getDividends(SymbolsList[i], from = "2007-01-01", to = Sys.Date(), src = "google", auto.assign = FALSE)
}
for (i in 1:2){
SymbolsList[i] <- getDividends(SymbolsList[i], from = "2007-01-01", to = Sys.Date(), src = "google", auto.assign = FALSE)
}
SymbolsList <- c("T", "AAPL")
for (i in 1:2){
SymbolsList[i] <- getDividends(SymbolsList[i], from = "2007-01-01", to = Sys.Date(), src = "google", auto.assign = FALSE)
}
ATNT <- T
ticker.lm = lm(T.Low ~ lag(T.High) + T.Open + lag(T.Low) + lag(T.Close)   , data = T)
summary(ticker.lm)
subset(ATNT, row.names(ATNT)>"2010-1-1")
ticker.lm = lm(T.Low ~ lag(T.High) + lag(T.Open) + lag(T.Low) + lag(T.Close)   , data = T)
predict.lm(ticker.lm)
install.packages("forecast")
library(forecast)
forecast(ticker.lm,h=1,level=90)
forecast(ticker.lm,h=1,level=90,fan=FALSE, robust=FALSE, lambda=NULL, find.frequency=FALSE,
allow.multiplicative.trend=FALSE)
forecast(ticker.lm, h=1, level=90, fan=FALSE, robust=FALSE, lambda=NULL, find.frequency=FALSE,
allow.multiplicative.trend=FALSE)
lastday <- T[nrow(T),]
forecast.lm(ticker.lm, lastday, level=c(80,95))
View(lastday)
View(lastday)
Arima(T)
install.packages("fun")
library(fun)
?mine_sweeper
if (.Platform$OS.type == "windows")
x11() else x11(type = "Xlib")
mine_sweeper()
mine_sweeper()
mine_sweeper()
mine_sweeper()
install.packages("RImageJROI")
install.packages("ripa")
install.packages("jpeg")
library(jpeg)
length[AAPL.rows]
length[AAPL]
length(ticker.lm)
nrows(AAPL)
nrow(AAPL)
lights_out()
if (.Platform$OS.type == "windows")
x11() else x11(type = "Xlib")
x = alzheimer_test()
View(x)
gomoku(n = 19)
ticker.lm = lm(T.Low ~ lag(T.High) + lag(T.Open) + lag(T.Low) + lag(T.Close)   , data = T)
predict.lm(ticker.lm)
summary(itcker.lm)
summary(ticker.lm)
forecast(ticker.lm, h=1, level=90, fan=FALSE, robust=FALSE, lambda=NULL, find.frequency=FALSE,
allow.multiplicative.trend=FALSE)
diff(ATNT$Adjusted, lag=1)
diff(ATNT$T.Adjusted, lag=1)
View(ATNT)
library(dplyr)
mutate(ATNT, SD.Adjusted = sd(T.Adjusted))
FraudTest <- as.data.frame(ATNT)
FraudTest <- as.data.frame.ts(ATNT)
mutate(FraudTest, SD.Adjusted = sd(T.Adjusted))
View(FraudTest)
mutate(FraudTest, SD.Adjusted = T.Adjusted-lag(T.Adjusted)/sd(T.Adjusted))
mutate(FraudTest, SD.Adjusted = (T.Adjusted-lag(T.Adjusted))/sd(T.Adjusted))
FraudTest <- mutate(FraudTest, SD.Adjusted = (T.Adjusted-lag(T.Adjusted))/sd(T.Adjusted))
View(FraudTest)
hist(FraudTest$SD.Adjusted)
